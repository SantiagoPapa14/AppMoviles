// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  userId         Int       @id @default(autoincrement())
  email          String    @unique
  username       String
  hashedPassword String
  name           String    @default("")
  summaries      Summary[]
  quizzes        Quiz[]
  decks          Deck[]
  followers      Follows[] @relation("following")
  following      Follows[] @relation("follower")
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [userId])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [userId])
  followingId Int

  @@id([followerId, followingId])
}

model Summary {
  projectId Int      @id @default(autoincrement())
  title     String
  subject   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  views     Int      @default(0)
  files     SummaryFile[]
}

model SummaryFile {
  id        Int       @id @default(autoincrement())
  summaryId Int
  summary   Summary @relation(fields: [summaryId], references: [projectId], onDelete: Cascade)
  filename  String
}

model Quiz {
  projectId Int            @id @default(autoincrement())
  title     String
  questions QuizQuestion[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  user      User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  views     Int            @default(0)
}

model QuizQuestion {
  id       Int    @id @default(autoincrement()) // Add the id field
  quizId   Int
  quiz     Quiz   @relation(fields: [quizId], references: [projectId], onDelete: Cascade)
  question String
  answer   String
  decoy1   String
  decoy2   String
  decoy3   String
}

model Deck {
  projectId  Int         @id @default(autoincrement())
  title      String
  flashcards Flashcard[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     Int
  user       User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
  views      Int         @default(0)
}

model Flashcard {
  id     Int    @id @default(autoincrement()) // Add the id field
  front  String
  back   String
  deckId Int
  deck   Deck   @relation(fields: [deckId], references: [projectId], onDelete: Cascade)
}
